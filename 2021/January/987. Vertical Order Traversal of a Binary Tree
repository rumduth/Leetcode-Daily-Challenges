/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void dfs(unordered_map<int, vector<pair<int,int>>>& tree, TreeNode* root,int row, int col, int& minCol, int& maxCol){
        if(!root) return;
        int val = root->val;
        minCol = min(minCol, col);
        maxCol = max(maxCol, col);
        tree[col].push_back({val, row});
        dfs(tree,root->left, row + 1, col - 1, minCol, maxCol);
        dfs(tree,root->right, row + 1, col + 1, minCol, maxCol);
    }
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        auto cmp = [](const pair<int,int>& a, const pair<int,int>& b){
        if(a.second == b.second) return a.first < b.first;
        return a.second < b.second;
        };
        unordered_map<int, vector<pair<int,int>>> tree; // COLUMN - (VALUE - ROW)
        int min_col = INT_MAX;
        int max_col = 0;
        dfs(tree,root,0,0, min_col, max_col);
        vector<vector<int>> res;
        for(int i = min_col; i <= max_col; i++){
            sort(tree[i].begin(),tree[i].end(),cmp);
            vector<int> line;
            for(auto p : tree[i]) line.push_back(p.first);
            res.push_back(line);
        }
        return res;
    }
};
