/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        auto cmp = [](const ListNode* a, const ListNode* b){
            return a->val > b->val;
        };
        priority_queue< ListNode*, vector<ListNode*>, decltype(cmp)> pq;
        for(auto list: lists)  if(list) pq.push(list);

        ListNode* head = nullptr;
        ListNode* cur = nullptr;
        
        while(!pq.empty()){
            auto node = pq.top();
            pq.pop();
            if(!head){
                head = cur = node;
            }
            else{
                cur->next = node;
                cur = cur->next;
            }
            if(node->next) pq.push({node->next});
        }
        return head;
    
    }
};
