class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        unordered_set<string> words;
        for(auto str: wordList) words.insert(str);
        
        int cnt = 1;
        queue<string> q;
        q.push(beginWord);
        words.erase(beginWord);
        while(!q.empty()){
            int n = q.size();
            for(int i = 0; i < n; i++){
                auto str = q.front();
                q.pop();
                if(str == endWord) return cnt;
                auto copy_str = str;
                for(int i = 0; i < str.length(); i++){
                    char original = str[i];
                    for(char c = 'a'; c <= 'z'; c++){
                        copy_str[i] = c;
                        if(words.find(copy_str) != words.end()){
                            q.push(copy_str);
                            words.erase(copy_str);
                        }
                        copy_str[i] = original;
                    }
                }
            }
            cnt++;
        }
        return 0;


    }
};
