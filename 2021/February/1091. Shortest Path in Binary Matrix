class Solution {
public:
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        vector<pair<int,int>> dir = {{-1,0},{1,0},{0,-1},{0,1},{-1,-1},{-1,1},{1,-1},{1,1}};
        int n = grid.size();
        if(grid[0][0] == 1 || grid[n-1][n-1] == 1) return -1;

        queue<vector<int>> q;
        vector<vector<bool>> visited(n,vector<bool>(n,false));
        q.push({0,0,1});
        visited[0][0] = true;
        while(!q.empty()){
            int size = q.size();
            for(int i = 0; i < size; i++){
                auto node = q.front();
                q.pop();
                int cur_row = node[0];
                int cur_col = node[1];
                int step = node[2];
                if(cur_row == n - 1 && cur_col == n-1) return step;
                 for(auto d: dir){
                    int next_row = cur_row + d.first;
                    int next_col = cur_col + d.second;
                    if(next_row < 0 || next_row >= n || next_col < 0 || next_col >= n)
                        continue;
                    if(visited[next_row][next_col]) continue;
                    if(grid[next_row][next_col] == 1) continue;
                    visited[next_row][next_col] = true;
                    q.push({next_row,next_col,step+1});
                }
            }
        }
        return -1;
    }
};
