/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    TreeNode* helper(TreeNode* root, int val, int depth, int current_depth){
        if(!root) return nullptr;
        if(current_depth + 1 == depth){
            auto currentLeftTree = root->left;
            auto currentRightTree = root->right;
            auto newLeftNode = new TreeNode(val);
            auto newRightNode = new TreeNode(val);
            root->left = newLeftNode;
            newLeftNode->left = currentLeftTree;
            root->right = newRightNode;
            newRightNode->right = currentRightTree;
            return root;
        }
        root->left = helper(root->left,val,depth,current_depth + 1);
        root->right = helper(root->right,val,depth,current_depth + 1);
        return root;
    }
public:
    TreeNode* addOneRow(TreeNode* root, int val, int depth) {
        if(depth == 1){
            auto newNode = new TreeNode(val);
            newNode->left = root;
            return newNode;
        }
        return helper(root,val,depth,1);
        
    }
};
