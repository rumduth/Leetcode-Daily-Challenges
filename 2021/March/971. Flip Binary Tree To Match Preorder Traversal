/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    bool helper(TreeNode* root, int& i, vector<int>& voyage, vector<int>& res){
        if(!root) return true;
        if(voyage[i] != root->val) return false;
        int next_i = i + 1;
        i += 1;
        if(!helper(root->left,i,voyage,res)){
            i = next_i; 
            swap(root->left,root->right);
            res.push_back(root->val);
            if(!helper(root->left,i,voyage,res) || !helper(root->right,i,voyage,res)) return false;
            return true;
        }
        return helper(root->right,i,voyage,res);



    }
public:
    vector<int> flipMatchVoyage(TreeNode* root, vector<int>& voyage) {
        vector<int> res; 
        int i = 0;
        bool a = helper(root, i, voyage, res);
        if(a) return res;
        return {-1};
    }
};
