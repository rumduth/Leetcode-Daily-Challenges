/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {TreeNode}
 */
var subtreeWithAllDeepest = function(root) {
    function dfs(root){
        if(!root) return [null,0];
        if(!root.left && !root.right) return [root,1];
        const [leftSubtree, leftHeight] = dfs(root.left);
        const [rightSubtree, rightHeight] = dfs(root.right);
        if(leftHeight > rightHeight)
            return [leftSubtree, 1 + leftHeight];
        else if(rightHeight > leftHeight)
            return [rightSubtree, 1 + rightHeight];
        else
            return [root, 1 + leftHeight];
    }
    return dfs(root)[0]

};
