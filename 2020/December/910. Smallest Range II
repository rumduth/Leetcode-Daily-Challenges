908. Smallest Range I

/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var smallestRangeI = function(nums, k) {
    let n = nums.length;
    if(n === 1) return 0;
    let maxA = Math.max(...nums);
    let minA = Math.min(...nums);
    if(maxA - minA <= 2 * k)
        return 0;
    return maxA - minA - 2 * k;
    
};


910. Smallest Range II
/**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var smallestRangeII = function(nums, k) {
    let n = nums.length;
    if(n === 1) return 0;
    nums.sort((a,b) => a - b);

    let res = nums[n-1] - nums[0];
    for(let i = 1; i < n; i++){
        let high = Math.max(nums[n-1] - k, nums[i-1] + k);
        let low = Math.min(nums[i] - k, nums[0] + k);
        res = Math.min(res, high - low);
    }
    return res;
};
