class Solution:
    def getPermutation(self, n: int, k: int) -> str:
        numbers = [str(i) for i in range(1, n+1)]
        used = [False] * n
        cnt = 0
        res = ""
        sequence = []

        def backtrack():
            nonlocal cnt, res
            if len(sequence) == n:
                cnt += 1
                if cnt == k:
                    res = ''.join(sequence)
                    return True
                return False

            for i in range(n):
                if not used[i]:
                    used[i] = True
                    sequence.append(numbers[i])
                    if backtrack():
                        return True
                    used[i] = False
                    sequence.pop()
            return False

        backtrack()
        return res



class Solution:
    def getPermutation(self, n: int, k: int) -> str:

        factorials = [1]
        for i in range(1,n):
            factorials.append(factorials[-1] * i)
        
        numbers = [i for i in range(1,n+1)]
        k -= 1
        res = []
        for i in range(n - 1, -1, -1):
            fact = factorials[i]
            index = k // fact
            res.append(str(numbers[index]))
            numbers.pop(index)
            k = k % fact
        return ''.join(res)
