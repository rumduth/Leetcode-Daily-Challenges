class Solution:
    def atMostNGivenDigitSet(self, digits: List[str], n: int) -> int:
        strN = str(n)
        k = len(strN)
        m = len(digits)
        
        cache = {}
        def dfs(i, is_tight):
            if i == len(strN):
                return 1
            if (i, is_tight) in cache:
                return cache[(i,is_tight)]
            
            limit = strN[i] if is_tight else '9'
            count = 0
            for d in digits:
                if d > limit:
                    break
                count += dfs(i + 1, is_tight and d == limit)
            
            cache[(i,is_tight)] = count
            return count
        
        res = 0
        for l in range(1, k):
            res += m ** l
        
        res += dfs(0, True)
        return res
