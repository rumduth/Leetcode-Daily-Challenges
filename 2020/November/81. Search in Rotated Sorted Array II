33. Search in Rotated Sorted Array

class Solution {
public:
    int search(vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size() - 1;
        while(left < right){
            int middle = (left + right) >> 1;
            if(nums[middle] == target)
                return middle;
            
            if(nums[middle] >= nums[left]){
                if(target >= nums[left] && target < nums[middle]){
                    right = middle - 1;
                }else{
                    left = middle + 1;
                }
            }else{
                if(target > nums[middle] && target <= nums[right]){
                    left = middle + 1;
                }else{
                    right = middle - 1;
                }
            }
        }
        if(nums[left] == target)
            return left;
        return -1;
    }
};

81. Search in Rotated Sorted Array II

class Solution {
public:
    bool search(vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size() - 1;
        while(left < right){
            int middle = (left + right) >> 1;
            if(target == nums[middle])
                return true;
            if(nums[middle] == nums[left])
                left += 1;
            else if(nums[middle] > nums[left]){
                if(target >= nums[left] && target < nums[middle])
                    right = middle - 1;
                else
                    left = middle + 1;
            }else{
                if(target > nums[middle] && target <= nums[right])
                    left = middle + 1;
                else
                    right = middle - 1;
            }
        }
        return nums[left] == target;
    }
};
