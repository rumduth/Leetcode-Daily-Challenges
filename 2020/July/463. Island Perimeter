class Solution:
    def islandPerimeter(self, grid: List[List[int]]) -> int:
        m = len(grid)
        n = len(grid[0])
        directions = (0,-1,0,1,0)
        res = 0
        visited = [[False] * n for _ in range(m)]
        def dfs(r, c):
            if r < 0 or r >= m or c < 0 or c >= n or grid[r][c] == 0:
                return 1
            if visited[i][j]:
                return 0
            visited[i][j] = True
            return dfs(r+1,c) + dfs(r, c+1) + dfs(r-1,c) + dfs(r,c-1)
        
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    res += dfs(i,j)
        
        return res



class Solution:
    def islandPerimeter(self, grid: List[List[int]]) -> int:
        m = len(grid)
        n = len(grid[0])
        res = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 1:
                    res += 4
                    if i > 0 and grid[i-1][j] == 1:
                        res -= 2
                    if j > 0 and grid[i][j-1] == 1:
                        res -= 2
        return res
