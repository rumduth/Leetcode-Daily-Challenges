class Solution:
    def largestTimeFromDigits(self, arr: List[int]) -> str:
       
        def calculate_time(h,m):
            return h * 60 + m
        def get_hour(arr):
            return arr[0] * 10 + arr[1]
        def get_min(arr):
            return arr[2] * 10 + arr[3]
        def output_time(arr):
            return str(arr[0]) + str(arr[1]) + ":" + str(arr[2]) + str(arr[3])
        res = -1
        largest_time = ""
        visited = [False] * 4
        sequence = []
        def backtrack():
            nonlocal largest_time, res
            if len(sequence) == 4:
                h = get_hour(sequence)
                m = get_min(sequence)
                if (0 <= h <= 22 and 0 <= m < 60) or (h == 23 and m <= 59):
                    if calculate_time(h,m) > res:
                        res = calculate_time(h,m)
                        largest_time = output_time(sequence)
                return
            for i in range(4):
                if not visited[i]:
                    visited[i] = True
                    sequence.append(arr[i])
                    backtrack()
                    visited[i] = False
                    sequence.pop()
        backtrack()
        return largest_time
