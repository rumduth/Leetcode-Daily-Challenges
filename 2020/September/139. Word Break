class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        visited = set(wordDict)
        cache = {}
        def backtrack(i):
            if i == len(s):
                return True
            if i in cache:
                return cache[i]
            for j in range(1,len(s) - i + 1):
                if s[i:i+j] in visited:
                    if backtrack(i+j):
                        return True
            cache[i] = False
            return False
        
        return backtrack(0)


class Solution:
    def wordBreak(self, s: str, wordDict: List[str]) -> bool:
        n = len(s)
        dp = [False] * (n+1)
        dp[0] = True
        for i in range(n):
            if dp[i] == True:
                for word in wordDict:
                    if s.find(word,i) == i:
                        dp[i + len(word)] = True
        
        
        return dp[n]
