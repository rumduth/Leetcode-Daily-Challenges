class Solution:
    def uniquePathsIII(self, grid: List[List[int]]) -> int:
        empty_cells = 0
        m, n = len(grid), len(grid[0])
        start_r = 0
        start_c = 0
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 0:
                    empty_cells += 1
                if grid[i][j] == 1:
                    start_r, start_c = i, j
        count_empty_cells = -1
        visited = [[False] * n for _ in range(m)]
        res = 0
        def dfs(r,c):
            nonlocal res, count_empty_cells
            if r < 0 or r >= m or c < 0 or c >= n or grid[r][c] == -1  or visited[r][c]:
                return
            if grid[r][c] == 2:
                if count_empty_cells == empty_cells:
                    res += 1
                return
            visited[r][c] = True
            count_empty_cells += 1
            dfs(r+1,c)
            dfs(r-1,c)
            dfs(r,c+1)
            dfs(r,c-1)
            count_empty_cells -= 1
            visited[r][c] = False
        
        dfs(start_r,start_c)
        return res
        
