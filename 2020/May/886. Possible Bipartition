class Solution:
    def possibleBipartition(self, n: int, dislikes: List[List[int]]) -> bool:
        adjacent_list = defaultdict(list)
        for u, v in dislikes:
            adjacent_list[u].append(v)
            adjacent_list[v].append(u)
        
        colors = [0] * (n+1)

        def dfs(i, color):
            colors[i] = color
            for neighbor in adjacent_list[i]:
                if colors[neighbor] == color:
                    return False
                if colors[neighbor] == 0 and not dfs(neighbor, -color):
                    return False
            return True


        for i in range(1,n+1):
            if colors[i] == 0:
                if not dfs(i,1):
                    return False
        
        return True
