class Node:
    def __init__(self):
        self.children = [None] * 26
        self.isEnd = False

class Trie:
    
    def __init__(self):
        self.root = Node()

    def insert(self, word: str) -> None:
        r = self.root
        for c in word:
            if not r.children[ord(c) - ord('a')]:
                r.children[ord(c) - ord('a')] = Node()
            r = r.children[ord(c) - ord('a')]
        r.isEnd = True

    def search(self, word: str) -> bool:
        r = self.root
        for c in word:
            if not r.children[ord(c) - ord('a')]:
                return False
            r = r.children[ord(c) - ord('a')]
        return r.isEnd

    def startsWith(self, prefix: str) -> bool:
        r = self.root
        for c in prefix:
            if not r.children[ord(c) - ord('a')]:
                return False
            r = r.children[ord(c) - ord('a')]
        return True


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
