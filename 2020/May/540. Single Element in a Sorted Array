class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        left = 0
        right = len(nums) - 1
        while left < right:
            middle = (left + right) >> 1
            if nums[middle] != nums[middle - 1] and nums[middle] != nums[middle+1]:
                return nums[middle]
            
            if nums[middle] == nums[middle-1]:
                leftSides = middle  + 1
                if leftSides % 2 == 1:
                    right = middle - 1
                else:
                    left = middle + 1
            else:
                rightSides = len(nums) - 1 - middle + 1
                if rightSides % 2 == 1:
                    left = middle + 2
                else:
                    right = middle - 1
        
        return nums[left]



class Solution:
    def singleNonDuplicate(self, nums: List[int]) -> int:
        left = 0
        right = len(nums) - 1
        while left < right:
            middle = (left + right) >> 1
            if middle % 2 == 1:
                middle -= 1
            if nums[middle] == nums[middle+1]:
                left = middle + 2
            else:
                right = middle
        
        return nums[left]
