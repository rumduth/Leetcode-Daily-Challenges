"""
# Definition for a Node.
class Node:
    def __init__(self, val = 0, neighbors = None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []
"""

from typing import Optional
class Solution:
    
    def cloneGraph(self, node: Optional['Node']) -> Optional['Node']:
        cache = {}
        def helper(node):
            if node is None:
                return None
            if node in cache:
                return cache[node]
            
            copy_node = Node(node.val)
            cache[node] = copy_node
            for neighbor in node.neighbors:
                copy_node.neighbors.append(helper(neighbor))
            
            
            return copy_node
        
        return helper(node)
