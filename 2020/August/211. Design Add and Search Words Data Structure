class Node:
    def __init__(self):
        self.children = [None] * 26
        self.isEnd = False

class WordDictionary:

    def __init__(self):
        self.root = Node()

    def addWord(self, word: str) -> None:
        r = self.root
        for c in word:
            index = ord(c) - ord('a')
            if not r.children[index]:
                r.children[index] = Node()
            r = r.children[index]
        r.isEnd = True

    def dfs(self, word, i, r):
        for j in range(i,len(word)):
            if word[j] == '.':
                for k in range(26):
                    if r.children[k] and self.dfs(word,j+1,r.children[k]):
                        return True
                return False
            index = ord(word[j]) - ord('a')
            if not r.children[index]:
                return False
            r = r.children[index]
        return r.isEnd


    def search(self, word: str) -> bool:
        return self.dfs(word,0,self.root)


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)
